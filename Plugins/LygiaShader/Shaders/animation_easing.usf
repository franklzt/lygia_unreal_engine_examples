#include "/LygiaShader/lygia/draw/circle.usf"
#include "/LygiaShader/lygia/space/ratio.usf"
#include "/LygiaShader/lygia/space/scale.usf"
#include "/LygiaShader/lygia/animation/easing.usf"
float2 st;
struct __Easing
{
	float4 drawShader(float2 st)
	{
		float4 color = float4(0.0, 0.0, 0.0, 1.0);
		float2 pixel = 1.0/View.ViewSizeAndInvSize.xy;
		float pct = frac(View.GameTime * 0.25);
		st = scale(st, 1.1);

		float rows = 11.0;
		float row = floor(st.y * rows);

		st.x += 0.5;

		if (row == 0)
			pct = pct < 0.5 ? linearOut(pct * 2.0) : linearIn( (1.0-pct) * 2.0 );
		else if (row == 1)
			pct = pct < 0.5 ? exponentialOut(pct * 2.0) : exponentialIn( (1.0-pct) * 2.0 );
		else if (row == 2)
			pct = pct < 0.5 ? quinticOut(pct * 2.0) : quinticIn( (1.0-pct) * 2.0 );
		else if (row == 3)
			pct = pct < 0.5 ? quarticOut(pct * 2.0) : quarticIn( (1.0-pct) * 2.0 );
		else if (row == 4)
			pct = pct < 0.5 ? cubicOut(pct * 2.0) : cubicIn( (1.0-pct) * 2.0 );
		else if (row == 5)
			pct = pct < 0.5 ? circularOut(pct * 2.0) : circularIn( (1.0-pct) * 2.0 );
		else if (row == 6)
			pct = pct < 0.5 ? quadraticOut(pct * 2.0) : quadraticIn( (1.0-pct) * 2.0 );
		else if (row == 7)
			pct = pct < 0.5 ? sineOut(pct * 2.0) : sineIn( (1.0-pct) * 2.0 );
		else if (row == 8)
			pct = pct < 0.5 ? elasticOut(pct * 2.0) : elasticIn( (1.0-pct) * 2.0 );
		else if (row == 9)
			pct = pct < 0.5 ? bounceOut(pct * 2.0) : bounceIn( (1.0-pct) * 2.0 );
		else if (row == 10)
			pct = pct < 0.5 ? backOut(pct * 2.0) : backIn( (1.0-pct) * 2.0 );
                
		st.x -= pct;

		st.y = frac(st.y * rows);
		st = ratio(st, float2(rows, 1.0));

		color += circle(st, 0.2) * step(0.0, row) * step(row, 10.);

		return color;
	}
};
__Easing _edgeFilter;
return _edgeFilter.drawShader(st);


